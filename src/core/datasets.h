#ifndef DATASETS_H
#define DATASETS_H

#include <stdio.h>      /* printf, NULL */
#include <stdlib.h>     /* srand, rand */
#include <string>
#include <map>

#include "narr.h"
#include "mnist_reader.h"

namespace pdl {

class DataSets
{
public:
    NArr<double>_data;
    NArr<double>_labels;
    unsigned _number_of_data;

    long len(){
        return _number_of_data;
    };

    virtual NArr<double> getData(std::vector<int>& index)
    {
        std::cout << "DataSets::getData" << std::endl;
        return NArr<double>();
    }

    virtual NArr<double> getLabel(std::vector<int>& index)
    {
        std::cout << "DataSets::getLabel" << std::endl;
        return NArr<double>();
    }
};


class Mnist : public DataSets
{
private:
    std::string _image_files[2] = {"train-images-idx3-ubyte", "t10k-images-idx3-ubyte"};
    std::string _label_files[2] = {"train-labels-idx1-ubyte", "t10k-labels-idx1-ubyte"};
    std::string _dir;

    int _number_of_images;
    int _image_size;
    unsigned char** _image_data;

    int _number_of_labels;
    unsigned char* _label_data;

public:

    enum
    {
        TRAIN = 0,
        TEST
    };

    Mnist(std::string dir, bool b_train)
    {
        _dir = dir;
        if(_dir.empty())
        {
            throw std::runtime_error("please specify mnist files directory.");
        }

        if(b_train)
        {
            loadFiles(TRAIN);
        }
        else
        {
            loadFiles(TEST);
        }
    }

    ~Mnist()
    {
        deleteArray();
    }

    NArr<double> getData(std::vector<int>& index) override
    {
        auto num_of_data = index.size();
        auto data_size = _image_size;
        Shape shape(num_of_data, data_size);

        NArr<double> na(shape);

        int count = 0;
        for(auto j = 0; j < index.size(); j++)
        {
            auto id = index[j];
            for(auto i = 0; i < data_size; i++)
            {
                na(count) = (double)(_image_data[id][i]/255.0);
                count++;
            }
        }
        //qDebug() << "Mnist::getData";
        return na;
    }

    NArr<double> getLabel(std::vector<int>& index) override
    {
        NArr<double> na(index.size());

        //qDebug() << "getLabel";
        int count = 0;
        for(auto i = 0; i < index.size(); i++)
        {
            na(count) = _label_data[index[i]];
            count++;
        }
        return na;
    }

    void deleteArray()
    {
        for(auto j = 0; j < _number_of_images; j++)
        {
            delete [] _image_data[j];
        }
        delete [] _image_data;
        delete _label_data;
    }

    void loadFiles(int dtype)
    {
        auto image_file = _dir + "\\" + _image_files[dtype];
        auto label_file = _dir + "\\" + _label_files[dtype];
        _image_data = readMnistImages(image_file, _number_of_images, _image_size);
        _label_data = readMnistLabels(label_file, _number_of_labels);
        _number_of_data = _number_of_labels;


        /*
        Shape shape_image;
        shape_image.appendDimension(_number_of_images);
        shape_image.appendDimension(1);
        shape_image.appendDimension(28);
        shape_image.appendDimension(28);

        _data = NArr<double>(shape_image);

        for(auto j = 0; j < _number_of_images; j++)
        {
            for(auto i = 0; i < _image_size; i++)
            {
                double value = (double)_image_data[j][i]/255.0;
                auto id = j * _image_size + i;
                _data(id) = value;
            }
        }

        Shape shape_label;
        shape_label.appendDimension(_number_of_labels);

        _labels = NArr<double>(shape_label);

        for(auto i = 0; i < _number_of_labels; i++)
        {
            _labels(i) = (double)_label_data[i];
        }*/
    }
};

static void getSpiral(double *&x, double *& t)
{
    t = new double[100*3];
    x = new double[100*3*2];

    static int t_data[100*3] = {1,1,2,0,1,2,0,0,1,2,1,1,2,1,1,2,1,2,2,1,2,1,0,2,1,0,2,2,0,2,0,0,1,0,0,2,2,1,1,2,2,1,0,0,0,1,0,1,2,1,0,1,1,2,0,2,0,0,1,2,2,1,2,1,0,0,1,1,0,0,1,1,2,1,2,2,2,1,0,2,0,1,0,0,1,0,2,2,1,2,1,0,0,0,0,0,0,2,0,0,0,0,2,1,0,2,0,1,0,1,0,0,2,0,2,0,1,0,0,0,2,2,1,1,0,1,0,0,2,1,0,1,1,1,0,2,2,1,0,1,1,1,2,1,1,1,1,1,2,0,2,1,2,2,2,0,0,2,0,1,0,0,0,1,2,0,1,2,2,1,0,1,0,2,0,1,0,1,0,2,2,2,2,0,2,0,1,1,0,0,1,2,1,1,1,2,2,2,2,1,1,2,1,2,1,0,0,2,2,2,0,1,2,0,1,1,1,1,1,2,2,1,2,0,0,2,0,0,0,2,0,1,0,2,0,2,1,1,1,2,1,1,1,0,0,1,1,0,1,2,2,1,2,0,2,1,2,2,2,2,0,2,0,1,0,2,0,0,0,1,2,1,1,2,1,2,1,0,1,2,2,2,0,2,0,2,0,1,0,1,2,2,2,0,2,2,2,0,2,0};
    static double x_data[100*3*2] = {-0.13981389,-0.00721657,0.37049392,0.5820947,0.1374263,-0.17179643,0.3031688,0.06472,-0.20848857,0.53050214,-0.7074377,-0.13391,0.49455667,-0.3739167,0.23201972,0.13808277,-0.15886047,-0.01906173,0.00491708,-0.33996445,-0.12995958,-0.00324155,-0.23974584,0.25499398,-0.33211905,-0.42578977,-0.14406797,0.65432745,-0.08773611,0.4820813,-0.84679544,0.35963517,0.34992874,0.6062589,-0.2656141,-0.39981142,0.03873516,-0.28740144,-0.17989218,0.00622921,-0.26522237,-0.45886502,-0.01586872,0.5397668,0.15063146,0.1868426,-0.7781106,0.05425706,-0.10568184,-0.03051801,0.17171463,0.18169777,-0.05060399,-0.427012,-0.5878122,-0.22666465,0.42734203,-0.10477977,0.01999407,0.00048688,-0.65559965,-0.6454371,0.09332082,0.11743604,-0.04677129,-0.01767616,-0.58700913,-0.79719526,0.18987328,0.11112218,-0.27497035,-0.40557528,-0.6626818,-0.19223109,0.89618134,0.08281892,-0.28567183,0.14419296,-0.6956357,-0.22133903,-0.73952246,-0.02658003,0.6405069,0.60344917,0.3396491,0.01544307,-0.00640535,-0.759973,-0.29891637,-0.75282735,-0.19354802,0.4392484,0.43733358,-0.10601573,0.9365552,0.08040111,-0.41539234,-0.43295404,-0.15145358,0.3375823,0.13898164,0.15742968,-0.21861286,0.35862017,0.31354076,0.58076864,-0.597431,0.78941506,0.21005045,0.15322797,-0.7109096,0.34453964,0.02253613,0.05560686,-0.30824462,-0.8028607,-0.08318522,0.5031702,-0.7474886,0.44515252,0.15577695,-0.25638554,0.34734264,0.5494116,-0.66352814,-0.25264674,-0.05139323,-0.03096346,-0.6793856,-0.7062827,-0.01549666,-0.78984797,0.44608194,0.6029187,0.06264956,0.6067743,-0.17036279,-0.75091714,0.01425096,0.03737526,-0.00570804,0.5299693,-0.32124844,0.07549458,0.13273749,-0.19995189,0.5703474,0.5609847,0.09690688,-0.24126554,0.091654,-0.1664318,-0.77509767,0.23520966,0.662295,0.3070266,0.46213728,-0.36678216,0.07434364,-0.02954696,0.43561164,-0.45512912,-0.1952649,0.39429888,0.27190292,0.18699946,-0.6833807,-0.6883972,-0.26835942,0.3858539,-0.19780748,-0.85748017,-0.5675895,-0.3560086,-0.61125225,-0.29794413,-0.24501143,0.04969303,-0.40200278,-0.3898638,-0.08871835,-0.0151345,0.08284235,0.10018555,-0.39722073,-0.8519482,0.14116073,0.18158647,-0.00038604,0.02999752,-0.18813577,-0.79812586,0.00094191,0.04999113,-0.23457344,-0.4415601,0.04370912,-0.738708,0.10349102,-0.74282545,-0.11388239,-0.86251426,0.42404062,-0.3502707,-0.6302627,0.72413325,0.27577567,0.56643426,0.02032876,0.08767407,-0.4918118,-0.3608617,0.4752903,-0.06707557,0.8451174,0.2065832,0.07829762,0.13953309,0.9336293,-0.29788658,0.3282343,-0.54941994,0.38677302,-0.34757248,0.13424662,-0.21089771,0.1625132,-0.68087405,-0.80911016,0.1331945,0.42443117,-0.33385354,-0.02386156,-0.01818313,0.12092289,-0.70977294,-0.28640968,-0.78966415,-0.7281537,-0.51175404,-0.76282126,0.10489876,-0.73185277,0.20491832,-0.18253154,0.05274695,0.86612016,0.20478243,0.1811798,-0.70715904,-0.11285946,-0.04077674,0.36761343,-0.48678574,0.12399456,0.11629853,0.08069741,-0.03984881,0.6468091,0.5040218,0.00512668,0.01933176,-0.10498876,0.44785863,-0.08959205,-0.04442143,0.73510563,0.4064723,0.29977617,0.11195645,0.09220015,-0.05999277,-0.5757059,0.78068095,-0.07488721,0.51457936,0.13923591,0.12928016,0.13235243,0.6261652,0.9177843,0.3139619,0.90872765,0.27697313,-0.33446026,-0.3981662,-0.14677872,0.42538926,0.9508962,-0.13189542,0.8146705,0.27552122,-0.16978921,0.00846301,0.83352554,0.3651509,-0.57954365,-0.27153113,0.2805128,-0.4846778,0.02211946,-0.2690924,-0.01839967,-0.00783914,0.08143438,-0.05803829,-0.81171393,0.4113642,0.044994,-0.31682098,0.37874952,0.03080279,0.42675576,-0.05272124,-0.7121174,0.42636698,0.5008086,-0.17346679,-0.23335491,0.11465377,0.08061991,0.1609361,0.30444184,-0.5855896,-0.74082303,-0.59471107,0.98899543,-0.04458715,-0.65090775,0.62154573,0.46965688,-0.19880246,-0.07588156,-0.02533749,-0.08034188,-0.45292956,0.00979881,-0.00199584,0.6181036,0.442208,0.41908243,-0.02774712,-0.29238784,0.06715166,0.4547784,-0.06911298,0.01946609,-0.35947332,0.36989382,-0.00886326,-0.,-0.,-0.00116657,-0.8299992,0.7107062,0.42871517,0.05984409,0.0801167,0.10375305,-0.26006788,-0.7847296,0.29966557,-0.30477002,-0.4816796,0.03268636,-0.2074406,0.23121913,0.1579168,-0.84386814,0.282819,0.15359965,0.12809038,0.5055555,0.59398115,-0.22394885,0.05241101,0.3977565,-0.04230585,-0.03843534,-0.6688967,-0.12524168,0.41135693,0.09373958,-0.07491923,0.31820756,0.6680898,0.05652277,0.5772393,-0.2891464,0.26171428,-0.0468118,-0.3871804,-0.5865638,-0.2800766,-0.74176145,0.11086001,-0.15293403,-0.4444223,-0.30727252,0.14554588,0.12535559,0.58675885,0.05059152,-0.30584392,-0.2701724,0.1053892,-0.7848798,0.154802,-0.0271639,-0.02936192,0.36799538,-0.5836775,0.13791645,-0.76771027,-0.8496624,-0.02395374,-0.9223507,0.18129861,0.00246038,-0.37999204,-0.0401785,-0.7989904,-0.21432792,0.04963413,0.10637081,-0.10576035,0.5306231,-0.20818052,-0.25087747,0.09980225,-0.02893586,0.58929,0.30133522,0.541846,-0.26706883,0.27032247,-0.00837021,-0.00547171,0.,-0.,-0.1008854,-0.35598052,-0.2475858,0.32680464,0.11015151,-0.14236097,0.38932335,-0.02296369,-0.00097699,0.00995216,0.13746658,-0.08187149,0.4326635,-0.5245973,-0.43632174,-0.8212937,0.27801412,-0.58754414,0.1297094,-0.15223493,0.00652849,0.0696949,-0.06727856,-0.0193286,-0.19585939,-0.88867265,0.09607905,-0.08757178,0.10985696,0.08678392,-0.6003261,-0.27424175,0.6741878,0.517659,0.6052991,0.5382499,-0.14900257,0.529432,-0.3786127,-0.34169054,-0.13840458,0.37529212,-0.13912046,0.48025566,-0.14588465,-0.0348951,-0.7831353,-0.5552469,-0.52873564,-0.7283122,-0.2772819,0.03891963,0.36321253,0.62167245,0.43358243,-0.18140091,-0.23986334,0.00809829,-0.6994348,0.0281238,-0.09433582,-0.38871682,-0.2739722,0.14504905,0.10108227,-0.13668348,0.25992823,0.1497909,0.02616625,-0.01467403,-0.17861071,0.11044552,0.10326176,-0.09453575,-0.4507611,-0.3649855,-0.74260926,0.47215626,-0.01749143,-0.3295361,0.2889293,-0.40806845,-0.7118476,0.48256913,-0.,0.,0.5026432,0.4579845,0.3952812,-0.45138982,-0.21264821,-0.39658636,0.34195596,0.07460645,-0.07018702,-0.7065223,0.06190507,0.09092724,0.2721572,0.7416404,-0.04843636,-0.34663224,0.49350116,0.51044744,0.9229654,0.11417017,-0.16242598,-0.40892273,-0.00198436,0.5599965,-0.03366692,-0.40861538,-0.19678791,0.03570037,0.39779076,-0.09931022,0.91857535,0.05117972,0.04958905,-0.00639738,-0.5489099,-0.28826708,-0.41255736,-0.36372572,0.35615346,0.05248545,0.05997716,-0.00165524,-0.14541428,-0.8374692,0.03845111,-0.01102326,0.03228098,0.11557655,0.6075539,0.47305202,0.2517982,0.14386679,-0.24811222,0.26084542,0.15010694,-0.17426391,0.06216975,-0.03217021,-0.45640576,0.83318293,0.4110389,-0.4092029,-0.20607458,0.95808834,-0.56674325,-0.16401847,-0.83592904,0.4075814,0.43614882,-0.22332534,-0.18852998,-0.37530845,0.02506495,0.07597202};

    for(int i = 0; i < 100*3; i++)
        t[i] = t_data[i];

    for(int i = 0; i < 100*3*2; i++)
        x[i] = x_data[i];
}


/*
void getSpiral(NArr<double>&x, NArr<double>&t, bool train = true)
{
    if(train)
        srand(2020);
    else
        srand(1984);

    auto num_data = 100;
    auto num_class = 3;
    auto input_dim = 2;
    auto data_size = num_class * num_data;

    x = NArr<double>(data_size, input_dim);
    x.zero();

    t = NArr<double>(data_size);
    t.zero();

    std::default_random_engine generator;
    std::normal_distribution<double> distribution;

    for(auto j = 0; j < num_class; j++)
    {
        for(auto i = 0; i < num_data; i++)
        {
            auto rate = (double)i / (double)num_data;
            auto radius = 1.0 * rate;
            auto theta = j * 4.0 + 4.0 * rate + distribution(generator) * 0.2;
            auto ix = num_data * j + i;
            auto px = radius * sin(theta);
            auto py = radius * cos(theta);
            x.getArray()[2*ix] = px;
            x.getArray()[2*ix+1] = py;
            t.getArray()[ix] = j;
        }
    }
}
*/

/*
def get_spiral(train=True):
    seed = 1984 if train else 2020
    np.random.seed(seed=seed)

    num_data, num_class, input_dim = 100, 3, 2
    data_size = num_class * num_data
    x = np.zeros((data_size, input_dim), dtype=np.float32)
    t = np.zeros(data_size, dtype=np.int)

    for j in range(num_class):
        for i in range(num_data):
            rate = i / num_data
            radius = 1.0 * rate
            theta = j * 4.0 + 4.0 * rate + np.random.randn() * 0.2
            ix = num_data * j + i
            x[ix] = np.array([radius * np.sin(theta),
                              radius * np.cos(theta)]).flatten()
            t[ix] = j
    # Shuffle
    indices = np.random.permutation(num_data * num_class)
    x = x[indices]
    t = t[indices]
    return x, t
 */
}

#endif // DATASETS_H
